<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS總整理]]></title>
    <url>%2Fecho5507.github.io%2F2019%2F06%2F04%2FCSS%E7%B8%BD%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[在參與大規模、歷時漫長且人手眾多的專案時，所有網頁開發人員都能遵守以下原則極為重要： 維持 CSS 樣式的可維護性 (maintainable) 維持撰寫風格清晰明瞭並具可讀性 (readable) 維持 CSS 樣式的延展性 (scalable) 為了達成上述原則，我們必須使用許多方法才能達成這個目標。 本文第一部分將探討語法、格式與 CSS 剖析；第二部分將從方法論 (approach)、思維框架 (mindframe) 與架構 CSS 的見解著手。 剖析 CSS 文件無論撰寫什麼文件，我們都應該盡量維持一致的風格，包括一致的註解、一致的語法與一致的命名規範。 總則盡量將每行寬度控制在 80 個字元以下。漸變（gradient）相關的語法與註解中的 URL 等可以當作例外，畢竟這部分我們也無能為力。 我傾向於用 4 個空白字元來縮排，而非使用 Tab 字元，並且習慣將不同的樣式拆分成多行。 單檔案與多檔案有些人喜歡將樣式表寫在一個很大的檔案裡，這還不錯，而且如果你按照下文的規則來撰寫的話，也不會遇到什麼問題。我在轉換到 Sass 之後，開始將樣式拆分成許多小檔案，這其實也是個不錯的選擇。但無論你採用什麼方式，下文所描述的規則，也依然適用。這兩種寫法僅僅在目錄以及區段標題上有所差異而已。 目錄大綱 (註解)在 CSS 檔案的開頭，我會寫一份目錄 (以註解形式撰寫)，例如：12345678/*------------------------------------*\ $CONTENTS\*------------------------------------*//** * CONTENTS............You&apos;re reading it! * RESET...............Set our reset defaults * FONT-FACE...........Import brand font files */ 這份目錄可以告訴其他網頁開發人員，這份樣式表具體包含哪些內容。這份目錄中的每一項標題，都應該與對應的區段標題相同。 如果你在維護一份規模較大的 CSS 樣式表檔案，對應的區塊也會在同一個檔案裡。如果你在維護的是一份小型的 CSS 檔案，那麼目錄中的每一項，也應該要有相對應的 @include 語句。 區段標題 (註解)從目錄大綱對應的區塊標題，其範例如下：123/*------------------------------------*\ $RESET\*------------------------------------*/ 在區段標題使用前綴 $ 可以方便我們使用（[Cmd|Ctrl]+F）命令搜尋 $[SECTION-NAME]，最主要的目的則是 將搜尋範圍限制在區段標題中，不會搜尋到其他的 CSS 關鍵字。 如果你維護的是一份大型的 CSS 樣式表，那麼建議在區段與區段之間間隔 5 行，範例如下：1234567891011121314/*------------------------------------*\ $RESET\*------------------------------------*/[Ourresetstyles]/*------------------------------------*\ $FONT-FACE\*------------------------------------*/ 在大型的 CSS 樣式表之間快速捲動時，這些間距較大的區塊，有助於我們在視覺上區分不同的區塊，以增加可讀性。 如果你在維護多份以 @include 連接的 CSS 樣式表，那麼在每個檔案的檔頭加上區段標題即可，不必像這樣額外空行。 樣式載入順序樣式編寫順序盡量按照特定順序編寫樣式規則，這可確保你充分發揮 CSS 縮寫中第一個字母 C 的意義：Cascade〔串聯〕。 一份妥善規劃的 CSS 應該按照如下順序撰寫： 樣式重置 (Reset) – 重置所有預設樣式，將許多元素預設的 margin, padding, border 都先歸零 預設樣式 (Elements) - 重新定義預設元素的樣式，也就是那些沒有設定 class 屬性的 h1、ul 等元素 物件樣式 (Objects and abstractions) – 定義那些通用的、共用的，或套用一些基礎設計模式的樣式 件樣式 (Components) – 將不同物件與擴充組合而成的完整元件 樣式王牌 (Style trumps) – 用來修正一些常見的瀏覽器相容性問題或一些樣式錯誤的地方，諸如此類的 如此一來，當你依序撰寫 CSS 的時候，每個區塊都可以自動繼承之前定義過的樣式屬性。這樣就可以減少樣式之間互相衝突或需要重新定義的部分，也可以減少某些特定的問題，建構出更完美的 CSS 結構。 解剖 CSS 規則集1234[選取器] &#123; [屬性]:[值]; [&lt;- 其他樣式 -&gt;]&#125; 撰寫 CSS 樣式時，習慣遵守這些規則： class 名稱以減號（-）連接，除了下文提到的 BEM 表示法 預設縮排 4 個空白字元 將不同的樣式拆分成多行 不同的樣式以 相關性 的順序進行排列，而非以字母順序 有瀏覽器前綴(Vendor-specific Properties)的樣式要適當縮排，將主要的名稱對齊，其值也會對齊 不同樣式之間應該要適當縮排，適當反映 DOM 的結構 在樣式中保留最後一條樣式規則的結尾分號 一個完整的範例如下：1234567891011121314151617.widget&#123; padding:10px; border:1px solid #BADA55; background-color:#C0FFEE; -webkit-border-radius:4px; -moz-border-radius:4px; border-radius:4px;&#125; .widget-heading&#123; font-size:1.5rem; line-height:1; font-weight:bold; color:#BADA55; margin-right:-10px; margin-left: -10px; padding:0.25em; &#125; 我們可以發現，.widget-heading 是 .widget 的子元素，因為前者比後者多縮排了一級，這使網頁開發人員在閱讀這些樣式時，可以迅速得知在 HTML 裡面的標籤結構大致為何。 我們還可以發現 .widget-heading 的樣式是根據其 相關性 排列的，例如 .widget-heading 會套用在文字的元素上，所以我們先新增字體相關的樣式，接下來是其它的。 但這裡有個例外，如下是一個沒有將樣式規則拆分成多行的例子：12345678910111213.t10 &#123; width:10% &#125;.t20 &#123; width:20% &#125;.t25 &#123; width:25% &#125; /* 1/4 */.t30 &#123; width:30% &#125;.t33 &#123; width:33.333% &#125; /* 1/3 */.t40 &#123; width:40% &#125;.t50 &#123; width:50% &#125; /* 1/2 */.t60 &#123; width:60% &#125;.t66 &#123; width:66.666% &#125; /* 2/3 */.t70 &#123; width:70% &#125;.t75 &#123; width:75% &#125; /* 3/4*/.t80 &#123; width:80% &#125;.t90 &#123; width:90% &#125; 在這個例子，你可以發現把這些樣式規則擺在一行內是比較清楚的。 命名規範一般情況下我都是以減號（-）連接 class 的名字（例如 .foo-bar 而非 .foo_bar 或 .fooBar），不過在某些情況下，我會用BEM（Block, Element, Modifier）表示法。 BEM表示法可以讓選取器更加嚴謹、更加清晰、所表達的資訊也更豐富。 這個 BEM表示法的格式大致如下：123.block&#123;&#125;.block__element&#123;&#125;.block--modifier&#123;&#125; 其中： .block 代表某個較為高階或較為抽象的樣式定義 .block__element 代表是套用在 .block 下的一個子元素 .block--modifier 代表 .block 在不同狀態下的樣式 舉例來說：12345.person&#123;&#125;.person--woman&#123;&#125; .person__hand&#123;&#125; .person__hand--left&#123;&#125; .person__hand--right&#123;&#125; 這個例子，我們描述的最上層的元素是一個人，然後這個人可能是一個女人。我們還知道人擁有手，這些是人體的一部分，而手也有不同的狀態，例如左手與右手。 這樣我們就可以根據上層元素來定義選取器的命名空間，並從名稱就能傳達出該選取器的主要功能，看它是一個子元素（__），還是不同狀態（–）？ 這時你若看到 .page-wrapper 則代表一個獨立的選取器，因為它不是某個元素下的子元素，或某個元素的某個狀態；然而如果你有一個 .widget-heading 樣式，而他其實跟 .widget 有關聯，是 .widget的子元素，那麼我們應該將這個樣式重新命名為.widget__heading 才對。 BEM 表示法雖然有點醜，而且有點囉嗦，但是它使得我們可以透過名稱快速得知元素的功能，以及元素之間的關係。除此之外，BEM 語法中的重複部分，其實非常利於 gzip 壓縮，名稱重複的部分會自動被 gzip 壓縮後剔除，並不會耗用頻寬。 無論你是否使用BEM 表示法，你都應該確保 class 命名得當，確保一字不多、一字不少，也確保類別樣式的命名抽象一點，以提高複用性（例如 .ui-list，.media）。那些因為特定目而設計的樣式，在命名時則要盡量精準（例如 .user-avatar-link），你不用擔心類別名稱的數量太多或字串長度過長，因為 gzip 壓縮演算法會很驚人的幫你把重複的文字進行壓縮。 HTML 中的 class 屬性為了確保可讀性，建議在 HTML 標籤的 class 屬性中，使用 2 個空白字元間隔不同的 class 名稱，例如：1&lt;div class=&quot;foo--bar bar__baz&quot;&gt; 增加的空白字元應該可以讓你在閱讀一個 class 屬性中的類別名稱時，更易於閱讀。 JS hooks千萬不要把 CSS 樣式當成 JS hooks 來用。我們在寫 jQuery 的時候，經常會自訂一些 class 樣式類別名稱，以方便我們透過 jQuery 的選取器選中這個元素。除此之外，有時候我們也會自訂一些 HTML 屬性，讓 HTML 擁有一些特殊的行為，這些都算是 JS hooks 的應用，如果你把 JS 的行為與樣式綁在一起時，代表我們套用的樣式與 JavaScript 行為無法區分開來，這對可維護性來說也蠻傷的。 如果你要把 JS 行為與某些標籤綁定起來的話，寫一個 JS 專用的 class 類別名稱。簡單地說就是在名稱上增加一個前綴 .js- 的命名空間，例如 .js-toggle，.js-drag-and-drop，這意味著我們可以透過不同的 class 綁定不同的 JS 行為和 CSS 樣式，而不會為偶發的衝突帶來困擾，範例如下：1&lt;th class=&quot;is-sortable js-is-sortable&quot;&gt;&lt;/th&gt; 上面的這個 th 標籤有兩個 class，你可以用 is-sortable 這個類別來定義這個表格的樣式，而用另一個 js-is-sortable 來套用排序功能。 註解我使用每行寬度不超過 80 個字元的區塊註解：1234567891011121314/** * 這是一個 docBlock 風格的註解。 * * 這裡是一個詳細且完整的說明文字，用來更進一步的說明程式碼。 * 當然，我們要把每行寬度控制在 80 個字元以內。 * * 我們可以在註解中嵌入 HTML 標記，而且也建議這麼做： * &lt;div class=foo&gt; &lt;p&gt;Lorem&lt;/p&gt; &lt;/div&gt; * * 如果是註解內嵌標籤的話，我選擇不在它前面加上星號，否則要複製貼上時還挺麻煩的。 */ 在註解中應該盡量詳細描述你的語法，因為對你來說清晰易懂的內容，對其他人可能並非如此。所以，建議每寫一部分樣式後，就要立刻編寫註解。 編寫註解的技巧註解其實有許多先進的用法，例如： 使用看似合法的選取器 (Quasi-qualified selectors) 替樣式加上特殊的標籤 (Tagging code) 用物件繼承的方式註記 (Object/extension pointers) 使用看似合法的選取器你應該避免過分修飾選取器，例如如果你能寫 .nav{} 就盡量不要寫ul.nav{}。過分修飾選取器會影響網頁效能，影響 class 的複用性，也會增加選取器的權重 (Specificity)，這些都是你應該竭力避免的。 不過，有時你可能希望告訴其他網頁開發人員 class 的使用範圍。以 .product-page 為例，這個 class 看起來像是一個較為上層的容器，可能是 html 或者 body 之類的元素，但是僅憑 .product-page 並無法有效判斷他會套用在哪個元素上。 我們可以在選取器前加上一些註解來修飾這個語法（即將前面的元素選取器註解掉）來描述 class 的作用範圍：1/*html*/.product-page&#123;&#125; 這樣我們就能準確得知，該 class 的作用範圍，並明確知道這個 class 不具複用性。看 CSS 就能知道這些事，可讀性就大大提升許多。 其它例子如：123/*ol*/.breadcrumb&#123;&#125;/*p*/.intro&#123;&#125;/*ul*/.image-thumbs&#123;&#125; 這樣我們就就可清楚地了解到這些樣式實際的套用範圍，而不用擔心它會不會套用到其他元素上。 替樣式加上特殊的標籤如果你寫了一個新的樣式規則，可以在它前面套用一些標籤(Tag)，例如：123456789/** * ^navigation ^lists */.nav&#123;&#125;/** * ^grids ^lists ^tables */.matrix&#123;&#125; 這些標籤可以使得其他網頁開發人員快速找到相關樣式。如果一個網頁開發人員需要搜尋和列表相關的部分，他只要搜尋 ^lists 就能快速定位到 .nav，.matrix以及其它相關部分。 用物件繼承的方式註記當物件導向的觀念用在 CSS 的時候，你經常能找到兩段相關的 CSS 樣式定義分散在不同地方（可能其中一個為基底樣式，另一個則為擴充樣式），我們可以用物件繼承的方式註記該樣式與原本樣式之間的關聯。這些在註解中的寫法如下： 也許在你的 base.css 檔案中，可以看到 .foo 的定義如下，這裡明確指出會有另一個 .foo 被定義在 theme.css 檔案中：1234/** * Extend `.foo` in theme.css */ .foo&#123;&#125; 而在 theme.css 檔案中，則能看到一個 .foo 的定義，明確告知這是繼承自 base.css 檔案中的 .foo 樣式：1234/** * Extends `.foo` in base.css */ .foo&#123;&#125; 如此一來，我們就能在兩塊相隔很遠的樣式定義中，建立一個聯繫關係，在搭配好用的開發工具之下，還能快速幫你找到彼此。 撰寫 CSS 的技巧之前的章節主要探討如何組織我們的 CSS 樣式，這些都是非常量化的規則。接下來我們要探討更理論的東西，也將探討我們的見解與方法論。 建構新元件建構新元件時，必須要在撰寫 CSS 之前 先寫好 HTML 部分。這可以幫助你準確判斷哪些 CSS 屬性可以繼承，避免重複套用多餘的樣式。 優先撰寫 HTML 可以讓你專注在資料、內容與語意上，而在這之後才新增相關的 class 和 CSS 樣式。 物件導向 CSS以物件導向的方式撰寫 CSS，我把元件區分成結構（物件）與外觀（擴充）。正如以下想法（注意這個只是想法而非例子）：12345.room&#123;&#125;.room--kitchen&#123;&#125;.room--bedroom&#123;&#125;.room--bathroom&#123;&#125; 我們在屋子裡有許多房間，它們都有共同的特點：它們都包含地板、天花板、牆壁和門。這些共享的部分我們可以放到一個抽象的 .room{} class 中。不過我們還有其它與眾不同的房間：一個廚房可能有地磚，臥室可能有地毯，洗手間可能沒有窗戶但是臥室會有，每個房間的牆壁顏色也許也會不一樣。物件導向 CSS 的思考方式，使我們把相同部分抽象出來，並組成結構部分，然後再用更具體的 class 來擴充這些外觀，並新增特殊的處理方法。 所以，與其撰寫大量的元件，倒不如努力找出這些元件中重複的設計模式，並將其抽取出來，寫成一個可以重複使用的 class，然後把這些骨架與基底的 ‘物件’ 透過 class 擴充其樣式，這樣才能套用到各種特殊的使用情境上。 當你要撰寫一個新元件時，先將其拆解成結構和外觀。撰寫結構的部分時，使用通用的 class 以確保這個元件的複用性，撰寫外觀時則使用更具體的 class 來點綴這些視覺上的設計。 版面配置所有元件都不應該定義寬度，保持其流動性(fluid)，盡量由上層元素或 格線系統 (Grid systems) 來決定其寬度。 永遠不要 定義元件的高度。高度應該僅用於尺寸已經固定的東西，例如圖片和 CSS Sprite 等等。在 p，ul，div 等元素上不應該定義高度，如果需要的話可以寫 line-height 會彈性許多。 網格系統 應該用 書架 來理解，你一定是拿書架來放書，是先有書(內容)，然後把書放到書架(網格系統)上；而不是把書架當成書，然後再擺到另一個書架上。將網格系統與我們的元件區分開來，將有助於我們更加彈性的配置元件在版面中的位置，也使得我們的前端工作更有效率。 你不應該套用任何樣式在網格系統上，他們單純的只為了版面配置之用。記得要在網格系統內套用樣式到內容上。記得：無論在任何情境下，永遠不要在網格系統的任何一格裡，套用任何 box-model 屬性(margin, padding, border)。 調整 UI 的尺寸我會用各種方法設定 UI 尺寸，包括百分比 (%)、px、em、rem (“root em”)，如此而已。 理想情況下，網格系統應該用百分比設定。如上所述，因為我用網格系統來固定欄寬和頁寬，所以我可以完全不用理會元素的尺寸，他會自己根據網格系統自由縮放。 我用 rem 定義字級大小，並且同時使用 px 相容於舊版瀏覽器，這可以讓你在使用 em 的情況下，又不用擔心舊版瀏覽器會無法正確顯示。這裡有個好用的 Sass mixin 程式碼片段如下 (假設你可以任意指定字形的預設大小)：1234@mixin font-size($font-size)&#123; font-size:$font-size +px; font-size:$font-size / $base-font-size +rem;&#125; 我只會在已經使用固定尺寸的元素上使用 px，包括已經使用 px 定義過並自動繼承的圖片或 CSS Sprite。 字級大小我會定義一些與網格系統原理類似的 class 來定義字級大小，這些 classes 可以在 double stranded heading hierarchy 的結構下設定字級。 簡寫或許你會嘗試撰寫像 background:red; 這樣的屬性，或許你這樣寫的背後真正意思是 background-image:none; background-position:top left; background-repeat: repeat; background-color:red; 這樣的語法，雖然這樣寫通常不會出什麼問題，但是哪怕只出一次問題就值得考慮要不要放棄簡寫了，在這個例子裡，你應該將其改寫為 background-color:red; 比較洽當。 類似的情況，像 margin:0; 這樣的宣告的確清楚明瞭，但是還是應該 盡量寫清楚，如果你只是想修改底部的 margin，最好具體一點，寫成 margin-bottom:0; 會來的好很多。 你必須把樣式定義的很清楚，不要因為習慣用簡寫，而不小心改到其他樣式的相關屬性。例如你只想改掉底部的 margin，那就不要用也會把其它邊距也歸零的 margin:0 語法。 簡寫雖然是好東西，但是切忌濫用。 選取器請維持選取器簡短、有效率與可攜性。 那些依賴頁面元素來定位的選取器有很多缺點。例如 .sidebar h3 span{} 這樣的選取器，就是太過依賴元素的相對位置，所以很難把 span 移到 h3 和 sidebar 外面並維持其樣式。 結構複雜的選取器也會影響網頁顯示效能，選取器結構越複雜（如 .sidebar h3 span 為三層，.content ul p a 是四層），瀏覽器對於顯示網頁的負擔就越大。 所以，盡量不要讓樣式依賴於其他元素的位置，也盡量讓選取器保持簡短而易懂。 整體來說，選取器應該盡量簡短（例如只有一層就能定位），但是 class 名稱則不應該過於簡略，例如 .user-avatar 就遠比 .usr-avt 來的好。 請記得： class 無所謂是否語意化的問題；你應該關注它們是否合理，不要刻意強調 class 名稱要符合語意，而要注重使用的合理性與未來性。 過度修飾的選取器由前文所述，過度修飾的選取器並不理想。 過度修飾的選取器是指像 div.promo 這樣的。很可能你只用 .promo 也能得到相同的效果。當然你可能偶爾會需要用元素類型來修飾 class（例如你寫了一個 .error 而且想讓它在不同的元素類型中顯示效果不一樣，例如 .error{ color:red; } div.error{ padding:14px;}），但是大多數時候還是應該盡量避免。 再舉一個修飾過度的選取器例子，ul.nav li a{}。如前文所說，我們馬上就可以刪掉 ul 因為我們知道 .nav 是個列表，然後我們就可以發現 a 一定在 li 中，所以我們就能將這個選取器改寫成 .nav a{}，這樣就可以減少一個層級，增加 CSS 的顯示速度。 選取器效能雖然瀏覽器效能日益提升，顯示 CSS 的速度也越來越快，但是你還是應該關注 CSS 的顯示效能。使用簡短、沒有巢狀的選取器，不要使用全域選取器（*{}）作為主要的選取器，避免使用更複雜的 CSS3 選取器，都可以讓你避免選取器效能的問題。 使用 CSS 選取器的目的比起運用選取器定位到某元素，更好的辦法則是直接在你想要新增樣式的元素上新增一個 class，我們以 .header ul{} 這樣一個選取器為例。 假設這個 ul 就是這個網站的主選單，它位於 header 中，而且目前為止是 header 中唯一的 ul 元素。.header ul{} 的確可以生效，但是這樣並不是好方法，這種寫法比較沒有未來性，而且也不太明確。如果我們在 header 中再新增一個 ul 的話，它就會套用我們給這個主選單寫的樣式，哪怕我們設想的不是這個效果。這意味著我們要麼重構許多樣式，要麼給後面的 ul 新增許多樣式來抵消之前的影響。 你的選取器必須符合你要給這個元素新增樣式的原因，思考一下， 「我定位到這個元素，是因為它是 .header 下的 ul，還是因為它是我網站的主選單？」這將決定你應該如何使用選取器。 確保你的主要選取器不是元素選取器(element/type selector)或物件/抽象(object/abstraction)的類別。例如在我們的 CSS 中肯定找不到像是 .sidebar ul{} 或者 .footer .media{} 這樣的選取器。 要明確表達：直接找到你要新增樣式的元素，而非其上層元素。不要想當然地認為 HTML 不會改變。 用選取器直接命中你需要的元素，而不是目前剛好選中的狀態。 !important你只應該在一些輔助類別(helper classes)上使用 !important 修飾子。用 !important 提升優先級也可以，例如如果你要讓某條規則 一直 生效的話，可以用 .error{ color:red!important; }。 避免主動使用 !important 修飾子。例如當你的 CSS 寫得很複雜的時候，不要因為想偷懶而使用 !important 來取巧，建議重寫你之前寫好的樣式，並重構選取系的使用方式。記得：維持選取器的簡短並且避免用 ID，將可有效幫助你寫好 CSS。 魔數與絕對定位魔數（Magic Number）是指那些「剛好有效果」的數字，這東西非常不好，因為它們只是治標不治本，而且缺乏延展性。 例如你用 .dropdown-nav li:hover ul{ top:37px; } 把下拉選單移動到主選單的下方，因為這裡的 37px 就是個魔數，37px 會生效的原因是因為這時 .dropbox-nav 碰巧高 37px 而已。 這時你應該用 .dropdown-nav li:hover ul{ top:100%; }，這時無論 .dropbox-down 多高，這個下拉選單都會往下移動 100%，這才是明智之舉。 每當你要在樣式中放入數字的時候，請三思而後行。如果你能用一個關鍵字或別名（例如 top:100% 意即「從上面拉到最下面」），或有更好的解決方法的話，就盡量避免直接出現數字。 你在 CSS 中留下的每一個數字，都好像在告訴別人說：「這個數字我不是真的很需要」，這是一種不負責任的表現。 條件式註解IE 專屬的樣式定義，基本上都應該避免使用，唯一可以用的時機點就是為了處理舊版 IE 不支援的內容（例如 PNG fixes 的問題）。 一個基本原則是，所有的版面配置與 box-model 的樣式都不需要用到 IE 專屬的樣式。也就是說，你在重構樣式之後，你應該不會想看到1&lt;!--[if IE 7]&gt; element&#123; margin-left:-9px; &#125; &lt; ![endif]--&gt; 或其他類似的語法。 CSS 偵錯如果你遇到 CSS 問題的時候， 請先把舊的、有問題的樣式移除後再寫新的 。如果舊的 CSS 樣式有問題的話，寫再多的新樣式是解決不了問題的。 把 CSS 原始碼和 HTML 部分刪掉，直到沒有 BUG 為止，然後你就知道問題出在哪裡了。 有時候你可能會寫上一個 overflow:hidden 把一些破版的問題給隱藏起來，但也許問題根本不出在 overflow 這部分。所以還是切記： 要治本，而不是單純治標而已。 前置處理器Sass 撰寫 CSS 時的前置處理器，請 靈活運用 這類前置處理器。用 Sass 可以令你的 CSS 更強大，但是不要用的太複雜。例如在 Vanilla CSS 裡面，只需在必要的地方套用樣式層級即可：1234.header&#123;&#125;.header .site-nav&#123;&#125;.header .site-nav li&#123;&#125;.header .site-nav li a&#123;&#125; 這樣的寫法在一般的 CSS 裡完全用不到，所以以下範例就是個 不好的 Sass 寫法：1234567.header&#123; .site-nav&#123; li&#123; a&#123;&#125; &#125; &#125;&#125; 如果你用 Sass 的話，應該改寫為： 12345.header&#123;&#125;.site-nav&#123; li&#123;&#125; a&#123;&#125;&#125;]]></content>
      <categories>
        <category>標記式語言</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass]]></title>
    <url>%2Fecho5507.github.io%2F2019%2F05%2F26%2FSass%2F</url>
    <content type="text"><![CDATA[Sass 介紹sass是一種基於css所產生的高階語言，他將一般程式語言所擁有邏輯概念和變數帶入css樣式表中，讓我們在撰寫網站的樣式時，可以用更快速、更方便的方式撰寫。它允許你使用變量、嵌套規則、 mixins、導入等眾多功能，並且完全兼容CSS語法。Sass有助於保持大型樣式表結構良好，同時也讓你能夠快速開始小型項目，特別是在搭配 Compass樣式庫一同使用時。 Sass 語法 Sass有兩種語法。第一種被稱為SCSS (Sassy CSS)，是一個CSS3語法的擴充版本，這份參考資料使用的就是此語法。也就是說，所有符合CSS3語法的樣式表也都是具有相同語法意義的SCSS文件。另外，SCSS理解大多數CSS hacks以及瀏覽器專屬語法，例如IE古老的filter語法。這種語種語法的樣式表文件需要以.scss擴展名。 第二種比較老的語法成為縮排語法（或者就稱為”Sass”），提供了一種更簡潔的CSS書寫方式。它不使用花括號，而是通過縮排的方式來表達選擇符的嵌套層級，而且也不使用分號，而是用換行符來分隔屬性。很多人認為這種格式比SCSS更容易閱讀，書寫也更快速。縮排語法具有Sass的所有特色功能，雖然有些語法上稍有差異。使用此種語法的樣式表文件需要以.sass作為擴展名。 SCSS 語法範例12345.menu&#123; ul&#123;..&#125; li&#123;..&#125; a &#123;..&#125;&#125; SASS 語法範例12345.menu ul //寫樣式必須2個空白或一個tab，且不用&#123; &#125; font-size:空白30px li color:空白red //不需要加; SASS 巢狀結構巢狀結構算是最常被使用的，透過巢狀式的結構，可清楚的知道元素上下層的關聯性，同時也可減少重覆的編寫開頭。Sass 的巢狀分為三種： 選擇器巢狀範例 假設我們有一段這樣的結構：1234567&lt;header&gt;&lt;nav&gt; &lt;a href=“##”&gt;Home&lt;/a&gt; &lt;a href=“##”&gt;About&lt;/a&gt; &lt;a href=“##”&gt;Blog&lt;/a&gt;&lt;/nav&gt;&lt;header&gt; 想選中 header 中的 a 標籤，在寫 CSS 會這樣寫：1234567nav a &#123; color:red;&#125;header nav a &#123; color:green;&#125; 那麼在 Sass 中，就可以使用選擇器的巢狀來實現：12345678nav &#123; a &#123; color: red; header &amp; &#123; color:green; &#125; &#125; &#125; 屬性巢狀CSS 有一些屬性字首相同，只是字尾不一樣，比如：border-top/border-right，與這個類似的還有 margin、padding、font 等屬性。假設你的樣式中用到了：1234.box &#123; border-top: 1px solid red; border-bottom: 1px solid green;&#125; 在 Sass 中我們可以這樣寫：123456.box &#123; border: &#123; top: 1px solid red; bottom: 1px solid green; &#125;&#125; 偽類巢狀和屬性巢狀非常類似，只不過他需要藉助&amp;符號一起配合使用。我們就拿經典的“clearfix”為例：1234567891011.clearfix&#123;&amp;:before,&amp;:after &#123; content:&quot;&quot;; display: table; &#125;&amp;:after &#123; clear:both; overflow: hidden; &#125;&#125; 編譯出來的 CSS：12345678clearfix:before, .clearfix:after &#123; content: &quot;&quot;; display: table;&#125;.clearfix:after &#123; clear: both; overflow: hidden;&#125; BEM寫法BEM 是一種 CSS class 命名的設計模式，將介面切割成許多獨立的區塊，以區塊（Block）、元素（Element）和修飾子（Modifier）來命名，優點是以元件觀念進行開發，具有重用性。 它擁有 OOCSS 的架構清楚的美好，也沒有 SMACSS 複雜或令人混淆的部份，因此 BEM 是一個很優秀的 CSS 架構指南。 範例:card為區塊card__body為元素，為card底下的子元素card__img–changBg修飾子為card__img的樣式 SASS 變數網頁CSS都常見到重複的數值，未來如果更改其中一項，其他也都要全都找出來，非常浪費時間，因此SASS「變數」就是來處理這樣的狀況。 變數使用方式範例:假設我們樣是必須套用顏色是相同的1234567891011.header&#123; color:red;&#125;.body&#123; color:red;&#125;.menu&#123; color:red;&#125; 在sass中，我們可以這樣表達:12345678910111213$color-text:red; // 設定變數：「$」+「變數」 ，在這宣告一個變數，存放&quot;紅色&quot;。.header&#123; color:$color-text; //顏色數值替換成「變數」&#125;.body&#123; color:$color-text; &#125;.menu&#123; color:$color-text;&#125; 下圖左邊為SCSS，右邊為輸出的CSS，輸出顏色與設定的變數顏色是一樣的： 範例:也可以將數值資料進行加減乘除運算12345678910111213$font-size-text:30px; //在這宣告一個變數，存放30px。.header&#123; font-size:$font-size-text; &#125;.body&#123; font-size:$font-size-text/10; //將變數資料除10，得到3px。&#125;.menu&#123; font-size:$font-size-text+10px; //將變數資料+10px，得到40px。&#125; 下圖左邊為SCSS，右邊為輸出的CSS，計算輸出變數是一樣的： Sass HSL functionDarken &amp; Lighten 明亮度利用 Darken &amp; Lighten 可以調整顏色的色彩明亮度 範例 先定義一個顏色 #F09671再定義一個變數叫做$color1$color:#F09671; //將此顏色放入變數內另用Darken調整暗的程度:darken($color,5%) = #ee855adarken($color,10%) = #eb7443darken($color,15%) = #e9632c 另用Lighten調整亮的程度:Lighten($color,5%) = #f2a788Lighten($color,10%) = #f5b89fLighten($color,15%) = #f7c9b6 For循環在Sass 中，可以使用@for 循環來完成。在Sass 的@for 循環中有兩種方式： @for $i from through @for $i from to 這兩個的區別是關鍵字through表示包括end這個數，而to則不包括end這個數。如下代碼，先來個使用through關鍵字的例子：123@for $i from 1 through 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125; 被編譯為：123456.item-1 &#123; width: 2em; &#125;.item-2 &#123; width: 4em; &#125;.item-3 &#123; width: 6em; &#125; 再來個to 關鍵字的例子：123@for $i from 1 to 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125; 編譯出來的CSS:1234567.item-1 &#123; width: 2em;&#125;.item-2 &#123; width: 4em;&#125; Each循環@each 循環就是去遍歷一個列表，然後從列表中取出對應的值。@each循環指令的形式：@each $Key, $value in &lt; list &gt; 在下面的例子中你可以看到，$Key是一個索引值 $value 就是一個內容，&lt; list &gt;是一個SassScript表達式，他將返回一個列表值。變量$var會在列表中做遍歷，並且遍歷出與$var對應的樣式塊。123456789101112$themes:( //使用小括號 //key, value &apos;primary&apos;:blue; &apos;danger&apos;:red; &apos;secondary&apos;:orange; );@each $key, $value in $themes&#123; .box-#&#123;$key&#125;&#123; background-color:$value; //將值提出放入class內 &#125;&#125; import 使用方式管理css檔案時，我們可以將檔案劃分成不同組成部分再利用import方式將檔案組合管理慣用建檔檔名: _variable.scss存放相關變數_main.scss存放相關css文件all.scss存放import進來的文件以下是import使用將sass變數統整成一個檔案流程:首先再scss資料夾新增_variable.scss檔案再將檔案變數放置_variable.scss檔案內再回到all.scss檔案內，新增@import &quot;_variable&quot;，即可將變數引入到all.scss內## import 注意事項注意記得要將;結尾，否則編譯會錯誤import引入檔案時要記得檔案順序，如圖_variable.scss必須放在_main.scss上方才不會出錯因為_main.scss存放css主檔，主檔內有使用_variable.scss內的變數，sass是先從最上方文件載入所以必須先載入_variable.scss 整合 Css Reset瀏覽器都有自己的預設樣式，而彼此之間都會有些些許的差異，如果不做一個初始化的動作，整個頁面會出現非預期的版面狀態，比如被預設了一些 margin ，或是字體大小。藉由Css Reset 將瀏覽器預設樣式清除掉，借此將差異之處清除歸零。 常見的Css Reset有Meyerweb及Normalize2者最大差異之處Meyerweb是將瀏覽器預設Css樣式全部清除，而Normalize則保留部分屬於HTML默認樣式。 步驟以下:建立_reset.scss，將Meyerweb放入 再回到all.scss檔案內，新增@import &quot;_reset.scss&quot;，即可將css reset引入到all.scss內 順序部分_variable.scss→_reset.scss→_base.scss→_mixin.scss→_layout.scss→_main.scss Mixin撰寫CSS時都會有常用的語法重複寫的經驗，比如 UL LI的CSS一定會寫「float：left;」、「display:block」這些都常寫到，算是重複性的工作。 @mixin 幫忙把這些常用語法蒐集起來，需要該語法時再插入「@include+語法名稱」簡化重複性工作。 Mixin使用方式範例:首先先用@mixin建立語法名稱，之後將要放入css放置，需要該語法時再插入「@include+語法名稱」，顯示結果如圖片右半部 也可以將參數形式代入@mixin內 多個參數時，使用方式 Mixin響應式運用運用Mixin與響應式搭配 1234567891011//建立@mixin + 名稱 &#123; @media (裝置寬度) &#123; @content //內容會在此出現，在跑回去include內 &#125;&#125;//插入 @include + 名稱()&#123; 內容 &#125; 範例:建立@mixin pad 插入@include pad，顯示結果如右半部，當裝置768px時.header寬度變成200px,字體大小更改成20px; 2個以上@mixin 另用變數方式寫法:12345@mixin bp($bp)&#123; @media (max-width: $bp)&#123; @content &#125;&#125; 範例]]></content>
      <categories>
        <category>層疊樣式表語言</category>
      </categories>
      <tags>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown語法]]></title>
    <url>%2Fecho5507.github.io%2F2019%2F05%2F25%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[Markdown 介紹Markdown 是一種輕量級標記式語言， 它有純文字標記的特性，讓編寫的可讀性提高，這是在以前很多電子郵件中就已經有的寫法，而目前也有很多網站都使用 Markdown 來撰寫說明文件或是在論壇上發表文章與發送訊息。 Markdown 優點 相較 HTML 之下，不會夾雜很多不必要的標籤，讓可讀性提高。 不需要像程式碼一樣縮排。 Markdown 缺點 若使用在像 wordpress 的網站時，要調整一些樣式變化是不太方便的。 需習慣 Markdown 的編輯方式。 Markdown 相關實用網站 即時編譯 Markdown 語法所顯示的版面 http://markdownlivepreview.com/ 將 HTML 語法轉為 Markdown https://domchristie.github.io/turndown/ 字體字體樣式是使用在一般文字中加強文字重要性，或是表示標題，粗體通常會用在一段文字中，強調某些字是這個語句中的重點，而標題字會依照字體大小來表示出這個標題的主要性，使用標題字的 Markdown 語法要特別注意 # 號越少標題越大，也就代表標題的重要性越高。 粗體1**bold** 標題字1# 標題 次標題字1## 次標題 小標題字1###### 小標題 列表無序清單1234* Item 1* Item 2 * Item a * Item b 顯示畫面 Item 1 Item 2 Item a Item b 有序清單1231. Item 12. Item 23. Item 3 顯示畫面 Item 1 Item 2 Item 3 表格Markdown製作表格使用|來分隔不同的單元格，使用-來分隔表頭和其他行。 單元格和表頭範例1234name | age---- | ---LearnShare | 12Mike | 32 顯示畫面 name age LearnShare 12 Mike 32 為了美觀，可以使用空格對齊不同行的單元格，並在左右兩側都使用|來標記單元格邊界：1234| name | age || ---------- | --- || LearnShare | 12 || Mike | 32 | 顯示畫面 name age LearnShare 12 Mike 32 對齊在表頭下方的分隔線標記中加入:，即可標記下方單元格內容的對齊方式： :--- 代表左對齊 :--: 代表居中對齊 ---: 代表右對齊 1234| left | center | right || :--- | :----: | ----: || aaaa | bbbbbb | ccccc || a | b | c | left center right aaaa bbbbbb ccccc a b c 如果不使用對齊標記，單元格中的內容默認左對齊；表頭單元格中的內容會一直居中對齊（不同的實現可能會有不同表現）。 插入其他內容1234| name | age | blog || ------------ | --- | -------------------------------------|| GOOGLE | 12 | [GOOGLE](https://www.google.com.tw/) || YAHOO | 32 | [YAHOO](http://www.yahoo.com.tw) | name age blog GOOGLE 12 GOOGLE YAHOO 32 YAHOO CheckBoxCheckBox 常用在確認事情是否完成，在使用 Checkbox 要注意，中括號中的 x 就代表這個項目是被打勾的，它並不會主動紀錄勾選過的內容，所以使用時要確認勾選過的內容是否有增加 ｘ，避免混亂。12- [x] This is a complete item- [ ] This is an incomplete item 顯示畫面 區塊區塊分為小區塊跟大區塊，通常用於一段相關內容的撰寫，一小段文字或是註釋都可能會用小區塊來表示，而篇幅較大又不希望與一般段落內容混在一起的文字，就會使用大區塊來包覆。 小區塊語法：1`字句前後加上反引號` 大區塊語法：1前後個加四個空白 顯示畫面字句前後加上反引號 前後個加四個空白 程式碼插入程式碼語法123```js這邊是程式碼```js 顯示畫面123function myFunction(A1,A2)&#123; return A1 * A2; //傳回A1乘上A2的值&#125; 圖片插入圖片語法1![圖片替代文字](圖片網址) 顯示結果： 階層式區塊階層式區塊在表現結構或功能關係上是相當好用的呈現形式 階層式區塊語法：1234&gt; Quote one sentences&gt;&gt;Quote two sentences&gt;&gt;Quote two sentences&gt;&gt;&gt;Quote three sentences 顯示結果： 超連結普通連結1格式為[link text](URL &apos;title text&apos;)。 範例 [Google](http://www.google.com/) 顯示結果: Google 指向本地文件的鏈接範例 [icon.gif](./images/icon.gif) 顯示結果: icon.gif]]></content>
      <categories>
        <category>標記式語言</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[股東權益內容]]></title>
    <url>%2Fecho5507.github.io%2F2019%2F05%2F24%2F%E8%82%A1%E6%9D%B1%E6%AC%8A%E7%9B%8A%E5%85%A7%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[股東權益組成項目資產總額減去負債總額後的淨資產稱為權益，在公司稱為股東權益 (Stockholders’ equity)。權益應區分為股本、資本公積、保留盈餘、其他權益 及庫藏股票，其中股本和資本公積合稱為「投入資本」。分別說明如下： 股本指公司向主管機關辦理登記之資本額，即「法定資本」，非經增資或減資手續，不得任意增減。 普通股股本普通股本也稱普通股權，是指股東已按普通股票的票面價值或設定價值認購的股本。 在對公司的收入以及資產的索取權優先次序上，普通股股東排在債權人以及優先股股東之後。比如，公司必須先償付債券及貸款的利息以及優先股的股息，方可分配股息予普通股股東。而一旦公司清盤，資產變現後的所得，必須先清償所有債權人以及優先股股東，剩下的才屬普通股股東所有。公司的董事由普通股股東任命，一張普通股代表一單位的投票權。普通股因為容易換手，二手市場活躍，是最為普及的證券。 特別股股本特別股票指與普通股股票持有人的權利不相同的股份，包括優先股、混合股、後配股、可轉換股、可贖回股等股票。 特別股息高於普通股且分配股息和公司剩餘財產的順序先於普通股、享有的權利應在章程中規定。股份公司有權在適當的時期，收回特別股，收回的條件和時間。 資本公積資本公積是企業收到的投資者的超出其在企業註冊資本所占份額，以及直接計入所有者權益的利得和損失等。 股票發行溢價超過票面金額發行股票所得之溢價， 可分作： 資本公積－普通股股票溢價 資本公積－特別股股票溢價 庫藏股票交易指公司出售庫藏 股票時，若售價高於收回成本產生之溢價。 受領股東贈與股東贈送本公司已發行之股票為「資本公積－受領股東贈與」。 保留盈餘指公司歷年累積之損益、未以現金或其他資產方式分配給股東或轉為資本而仍保留於公司者。 法定盈餘公積法定盈餘公積金統一規定必須提取的公積金，它的提取順序在彌補虧損之後，按當年稅後利潤的10%提取。盈餘公積金已達到註冊資本50%時不再提取。非公司制企業法定盈餘公積的提取比例可超過凈利潤的10%。 特別盈餘公積特別盈餘公積，係指企業依照自己的章程或股東會盈餘分 派之決議，而自盈餘中指撥暫不發放給投資者的部份。企業自行指撥盈餘之目的，係在限制企業分派股息及紅利給投資者，而把企業的資金保留在企業，備供營運。 未分配盈餘企業未作分配的利潤。它在以後年度可繼續進行分配，在未進行分配之前，屬於所有者權益的組成部分。從數量上來看，未分配利潤是期初未分配利潤加上本期實現的凈利潤，減去提取的各種盈餘公積和分出的利潤後的餘額。 未分配利潤有兩層含義： 留待以後年度處理的利潤 未指明特定用途的利潤。相對於所有者權益的其他部分來說，企業對於未分配利潤的使用有較大的自主權。 其他權益指其他造成權益加減變動的項目。 庫藏股票指公司收回自己流通在外且尚未註銷之股票的成本，應列為權益之減項。]]></content>
      <categories>
        <category>中級會計學</category>
      </categories>
      <tags>
        <tag>公司會計</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加值型營業稅]]></title>
    <url>%2Fecho5507.github.io%2F2019%2F05%2F24%2F%E5%8A%A0%E5%80%BC%E5%9E%8B%E7%87%9F%E6%A5%AD%E7%A8%85%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[公司概念]]></title>
    <url>%2Fecho5507.github.io%2F2019%2F05%2F24%2F%E6%B8%AC%E8%A9%A6%E7%94%A8%2F</url>
    <content type="text"><![CDATA[公司組成要素我國公司法第1條規定，公司的構 成要件有三: 公司應以營利為目的 公司應依照公司法組織、登記、成立 公司為社團法人 法人為法律上賦予其人格，並在法令範圍內享有權利及負擔義務的主體。 法人又可分為社團法人及財團法人 法人類型 成立要件 舉例 社團法人 以「人」的聚集 公司組織 財團法人 以「財產」的聚集 基金會 公司的種類依公司法第2條規定，公司分為下列四種： 公司型態 股東人數 責任 有限公司 1人以上 有限（以出資額為限） 無限公司 2人以上 無限清償責任 兩合公司 1人以上無限責任股東與1人以上有限責任股東 無限責任股東連（帶無限清償責任）有限責任股東有限（以出資額為限） 股份有限公司 2人以上股東 或 政府、法人股東1人 有限（就其所認股分為限） 閉鎖型公司 我國於104年7月1日增訂閉鎖性股份有限公司之法規。閉鎖性股份有限公司指的是股東人數不超過50人，且在公司章程明定股份轉讓限制之非公開發行股票公司。這是在既有的股份有限公司制度下，再新增的特殊公司組織。 新修正通過條文也明訂，發起人的出資除現金外，得以公司所需財產、技術、勞務或信用抵充，惟以勞務或信用抵充的股數，不得超過公司發行股份總數的一定比例。此外，為提供新創事業的發起人及股東在股權方面有更自由的規劃空間，新修正通過條文引進國外無票面金額股制度，並由公司自行審酌擇一採行票面金額股或無票面金額股；並允許閉鎖性股份有限公司透過章程規定，發行複數表決權特別股或對特定事項有否決權的特別股等。 閉鎖性股份有限公司 一般股份有限公司 出資種類 得以公司事業所需之財產、技術、 勞務或信用抵充。 不得以勞務或信用出資 股票面額 得發行無面值股。 不得發行無面值股。 股份有限公司之特質 發行股票：將資本劃分為股份，每股金額一律相同，以股票之發行，表彰股東所擁有的權益。 股東的責任有限，籌資容易：股東所負責任僅就其所認之股份額為 限；責任風險由多位股東共同負擔而減輕，且資本劃分為面額較小之股 份，容易向一般投資大眾募集資金，使企業規模較易擴大。 股份可自由轉讓：依公司法第163條之規定，公司股份之轉讓不得以章 程禁止或限制。 所有權和經營權分離：股東握有公司所有權，而董事（由股東選出）握 有公司經營權，透過所有權和經營權的分離，公司組織不受股東變動而影響。]]></content>
      <categories>
        <category>中級會計學</category>
      </categories>
      <tags>
        <tag>公司會計</tag>
      </tags>
  </entry>
</search>
